#!/bin/bash

VERSION="1.0"  # Must be a float

PANFROST="/etc/modprobe.d/panfrost.conf"
UBOOT_MENU="/usr/share/u-boot-menu/conf.d/radxa.conf"
UBOOT_UPDATE="/usr/sbin/u-boot-update"
KERNEL_CMDLINE="/etc/kernel/cmdline"
EXTLINUX_CONFIG="/boot/extlinux/extlinux.conf"
UART2="/boot/dtbo/rk3568-uart2-m0.dtbo"

REPO="https://api.github.com/repos/AqualinkD/AqualinkD-Radxa-zero3"

MOUNT="./tmp-mnt"

TRUE=0
FALSE=1

patchImage=$TRUE

if [ "$EUID" -ne 0 ]; then
  echo "Please run as root"
  exit 1
fi

#####################################
# Functions

function msg() {
  echo -e "$@" >&2
}

function error() {
  echo "ERROR: $@" 1>&2;
}

function checkCommand() {
  if ! command -v $1 2>&1 >/dev/null; then
    error "Command '$1' not found, please check path or install if missing!"
    exit 1
  fi
}

function downloadImage() {
  msg "Downloading Image"
  curl -LfO https://github.com/radxa-build/radxa-zero3/releases/download/b6/radxa-zero3_debian_bullseye_cli_b6.img.xz
           

  echo "radxa-zero3_debian_bullseye_cli_b6.img.xz"
}

function getOffset() {
  file=$1
  size=$(fdisk -lu $file | grep ${file}3 | awk '{print $2}')
  size=$(( $size * 512))

  if [ $? ]; then
    echo $size
    return
  fi

  echo 1
  return
}

function makeBackup() {
  if [ ! -f "$1" ]; then
    error "File '$1' does not exist"
    echo 1
    return
  fi

  if [ ! -f "$1".origional ]; then
    cp "$1" "$1".origional
  else
    msg "File '$1.origional' already exists, not making backup"
  fi

  echo 0
  return
}

function patchFile() {
  file="$MOUNT/$1"

  filename=$(basename "$file")
  
  # Try to download if missing
  if [ ! -f ./"$filename".diff ]; then
    msg "Downloading patch for '$filename'"
    #curl --fail --silent --show-error "https://raw.githubusercontent.com/sfeakes/AqualinkD-Radxa-zero3/main/$filename.diff" -o ./"$filename".diff 1>&2
    curl -fsSL -H "Accept: application/vnd.github.raw" "$REPO/contents/$filename.diff" -o ./"$filename".diff 1>&2
  fi

  if [ -f ./"$filename".diff ]; then
    msg "using $filename.diff"
    #patch --ignore-whitespace -p0 < ./"$filename".diff
    patch --forward --ignore-whitespace --backup --suffix=.origional "$file" ./"$filename".diff 1>&2
    rm ./"$filename".diff
  else
    error "No diff file '$filename.diff'"
  fi
}

function enableUART2() {
  
  patchFile "$UBOOT_MENU"
  patchFile "$UBOOT_UPDATE"
  patchFile "$KERNEL_CMDLINE"
# rename
  if [ ! -f "$UART2" ]; then
    if [ -f "$UART2".disabled ]; then
      mv "$UART2".disabled "$UART2"
    else
      error "Can't find '$UART2' ($UART2.disabled)"
    fi
  fi

  # If we are in amd64 arch, we can run u-boot-update, if not force it manually
  if command -v dpkg 2>&1 >/dev/null; then
    ARCH=$(dpkg --print-architecture)
  else
    ARCH=unknown
  fi
  
  case $ARCH in 
    arm64)
      /usr/sbin/chroot $MOUNT /usr/sbin/u-boot-update
      #chroot $MOUNT /usr/sbin/u-boot-update
      echo $FALSE
    ;;
    *)
      msg "WARNING: Source OS is not arm64, forcing a extLinux configuration, please run 'u-boot-update' once system is running!"
      patchFile "$EXTLINUX_CONFIG"
      echo $TRUE
    ;;
  esac

  return 
}


function createWiFi_WPA() {
  # Need to get this working, but a lot seems to be missing from OS at moment.
  wifi_supplicant="/etc/wpa_supplicant/wpa_supplicant-wlan0.conf"
  wifi_interfaces="/etc/network/interfaces.d/wlan0.conf"

  read -p "WiFi SSID :" wifissid
  read -p "WiFi Password :" wifipasswd

cat << EOF > "$MOUNT/$wifi_supplicant"
  update_config=1
  ctrl_interface=DIR=/run/wpa_supplicant GROUP=netdev 
  network={
    ssid="$wifissid"
    psk="$wifipasswd"
  }
EOF

cat << EOF > "$MOUNT/$wifi_interfaces"
  auto wlan0
   iface wlan0 inet dhcp
   wpa-conf $wifi_supplicant
EOF

  chmod 0600 "$MOUNT/$wifi_supplicant"
  chmod 0600 "$MOUNT/$wifi_interfaces"

  msg "\nCreated WiFi config created the below files, if it doesn't work, please delete both files and use rsetup or nmcli to configure WiFi.\n'$wifi_supplicant'\n'$wifi_interfaces'"

}

function createWiFi_NMCLI() {
  
  read -p "WiFi SSID :" wifissid
  read -p "WiFi Password :" wifipasswd
  
  nmcli dev wifi connect "$wifissid" password "$wifipasswd"

  # TODO Need to check the --ask flag for temporary
}

function createWiFi_NMC() {
  # Below will fake a nmcli entry.
  # create SSID if we can
  if command -v openssl 2>&1 >/dev/null; then
    uuid=$(openssl rand -hex 16)
    wifiuuid="uuid="${uuid:0:8}-${uuid:8:4}-${uuid:12:4}-${uuid:16:4}-${uuid:20:12}
  else
    wifiuuid=""
  fi

  read -p "WiFi SSID :" wifissid
  read -p "WiFi Password :" wifipasswd

  wififile="$MOUNT/etc/NetworkManager/system-connections/$wifissid.nmconnection"

cat << EOF > "$wififile" 
[connection]
id=$wifissid
uuid=$wifiuuid
type=wifi
interface-name=wlan0
permissions=

[wifi]
mac-address-blacklist=
mode=infrastructure
ssid=$wifissid

[wifi-security]
auth-alg=open
key-mgmt=wpa-psk
psk=$wifipasswd

[ipv4]
dns-search=
method=auto

[ipv6]
addr-gen-mode=stable-privacy
dns-search=
method=auto

[proxy]
EOF

 chmod 600 "$wififile"

 msg "\nCreated rudimentary WiFi config '$wififile',\nif it doesn't work, please delete file and use rsetup or nmcli to configure WiFi"
}


function mountImage() {
  image=$1

  if [ ! $1 ]; then
    read -rep 'No immage passed on command line, do you want to downlod Radxa-zero3 image? (y/n) ' -n 1
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      image=$(downloadImage)
    else
      echo -e "Please pass valid image file example:-\n          $0 radxa-zero3_debian_bullseye_cli_b6.img.xz\n"
      exit 1
    fi
  fi

  extension="${image##*.}"

  if [ ! -f $image ]; then
    error "No image file '$image'"
    exit
  fi

  if [ "$extension" == "xz" ]; then
    checkCommand xz
    is_zipped=1
    msg "Decompressing $image"
    xz --decompress "$image"
    # Remove extension .xz
    image="${image%.*}"
    # Check it decompressed and file is there
    if [ ! -f $image ]; then
      error "Decompressing image file '$1' to '$image'"
      exit
    fi
  fi

  offset=$(getOffset $image)
  # offset should = 348127232 for this image.
  if [ $offset -ne 348127232 ]; then
    msg "$image does not look like radxa-zero3_debian_bullseye_cli_b6"

    if [ $offset -gt 512 ]; then
      read -p "Are you sure you want to continue? (y/n) " -n 1 -r
      if [[ $REPLY =~ ^[Nn]$ ]]; then
        exit 0
      fi
    else
      exit 1
    fi
  fi

  if [ ! -d "$MOUNT" ]; then
    mkdir "$MOUNT"
  fi

  mount -o loop,rw,sync,offset=$offset $image $MOUNT
  if [ ! $? ]; then
    error "Mounting image!"
    exit 1
  fi

  # second check for mount
  if [ ! -f "$MOUNT/$PANFROST" ]; then
    error "Doesn't look like image mounted correctly and/or incorrect image"
    cleanup
    exit 1
  fi

}


function cleanup() {
  # Check if mounted and unmount, blindly unmount and hide any errors
  if [ $patchImage -eq $TRUE ]; then
    umount $MOUNT > /dev/null 2>&1
    rmdir $MOUNT > /dev/null 2>&1
  fi
}

########################################################
#                    main                              #
########################################################

#is_zipped=0
showWifi=0
showUbootupdate=0
showInitramfs=0

checkCommand mount
checkCommand awk 
checkCommand chroot
checkCommand patch
#checkCommand dpkg
checkCommand curl
#checkCommand xz


# Check for newer version

latest_version=$(curl -fsSL -H "Accept: application/vnd.github.raw" "https://api.github.com/repos/AqualinkD/AqualinkD-Radxa-zero3/contents/radxa-serial-patch" 2>/dev/null | grep -m 1 VERSION | awk -F'"' '{print $2}')

if [ -n "$latest_version" ]; then
  if (( $(echo "$latest_version > $VERSION" | bc -l) )); then
    msg "New Version of this script exists, latest=$latest_version, current=$VERSION"
    msg "Please use the following to download & install :-"
    msg "    curl -fsSL -H https://raw.githubusercontent.com/aqualinkd/AqualinkD-Radxa-zero3/refs/heads/main/radxa-serial-patch -o $0"
    msg ""
    read -rep 'Do you want to continue? (y/n) ' -n 1
    if [[ $REPLY =~ ^[Nn]$ ]]; then
      exit $TRUE
    fi
  fi
fi

if [ $# -eq 0 ] || [ -z "$1" ]; then
  #echo "?"
  read -rep 'Patch Image or current System? (I/S) ' -n 1
  if [[ $REPLY =~ ^[Ss]$ ]]; then
    patchImage=$FALSE
  fi
fi

if [ "$1" = "-s" ] || [ "$1" = "-S" ]; then
   patchImage=$FALSE
elif [ "$1" = "-repatch" ] || [ "$1" = "--repatch" ]; then
  # This is used to re-patch a running system
  patchImage=$FALSE
  patchPanfrost=$TRUE
  patchUart=$TRUE
  showInitramfs=$FALSE
fi


if [ $patchImage -eq $FALSE ]; then
  MOUNT="/"
fi

# Reset full path to UART2
UART2=$MOUNT$UART2

# Mount and/of Download image
if [ $patchImage -eq $TRUE ]; then
  mountImage $1
fi


if [ "$patchPanfrost" -eq "$TRUE" ]; then
  patchFile "$PANFROST"
else
  read -rep 'Do you want to disable panfrost driver? (y/n) ' -n 1
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    patchFile "$PANFROST"
    showInitramfs=$TRUE
  else
   showInitramfs=$FALSE
  fi
fi 

# Don't seem to need to run this, would also only work on amr64 arch so leaving it out.
# chroot ./tmp-mnt /usr/sbin/update-initramfs -u
# Since we did run command, show update message


if [ "$patchUart" -eq "$TRUE" ]; then
  showUbootupdate=$(enableUART2)
else
  read -rep $'If you want to use standard UART2 for RS485/232 for GPIO pins 8 & 10 (ie for a RS485 Hat) then you need to enable it now.
  This will also disable U-Boot menu over serial connection & Radxa serial debugging.
  Do you want to enable UART2? (y/n) ' -n 1

  if [[ $REPLY =~ ^[Yy]$ ]]; then
    showUbootupdate=$(enableUART2)
  fi

  if [ $patchImage -eq $TRUE ]; then
    read -rep 'Do you want to create a WiFi connection? (y/n) ' -n 1
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      if [ $patchImage -eq $TRUE ]; then
        createWiFi_NMC
      else
        createWiFi_NMCLI
      fi
      showWifi=$FALSE
    fi
  fi
fi

# rename host
# cat $hostname to /etc/hostname
# modify /etc/hosts change radxa-zero3 to hostname

# install aqualinkd
# Also change serial_port=/dev/ttyS2 i aqualinkd.conf


cleanup

#if [ $is_zipped -eq 1 ]; then
#  read -rep 'Do you want to compress the image? (y/n) ' -n 1
#  if [[ $REPLY =~ ^[Yy]$ ]]; then
#    msg "Compressing '$image'"
#    xz "$image"
#    image="$image".xz
#  fi
#fi

if [ $patchImage -eq $TRUE ]; then
  msg "\nImage '$image' is ready, please burn to CF or load to eMMC"
  msg "Once system new image has booted, run the following command(s)"
  if [ $showUbootupdate -eq $TRUE ]; then
    msg "u-boot-update"
  fi
  if [ $showInitramfs -eq $TRUE ]; then
    msg "update-initramfs -u"
  fi
else
  if [ $showInitramfs -eq $TRUE ]; then
    read -rep 'Do you want to run update-initramfs now? (y/n) ' -n 1
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      update-initramfs -u
    else
      msg "Please run 'update-initramfs -u' before rebooting"
    fi
  fi
  # Should probably run the following commands if panfrost was disabled
  #update-initramfs -u
fi

msg ""

exit

