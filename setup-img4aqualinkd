#!/bin/bash
#
#  This is in 2 stages.
#  Run on an image file that's been prepared with radxa-serial-patch first.
#  radxa-serial-patch <img-file>
#  setup-img4aqualinkd <img-file>
#  --- boot image --
#  run script again on booted image with --finalize flag
#  curl -fsSL https://raw.githubusercontent.com/aqualinkd/AqualinkD-Radxa-zero3/refs/heads/main/setup-img4aqualinkd | sudo bash -s -- --finalize
#

VERSION="1.0"

REPO="https://api.github.com/repos/AqualinkD/AqualinkD"
OWN_REPO="https://api.github.com/repos/AqualinkD/AqualinkD-Radxa-zero3"
TEMP_INSTALL="/tmp/aqualinkd"

EXT_ANTENNA_OVERLAY=/boot/dtbo/radxa-zero3-external-antenna.dtbo

MOUNT="./tmp-mnt"
HOSTS="/etc/hosts"
HOSTNAME="/etc/hostname"

TRUE=0
FALSE=1

red=$'\e[31m'
green=$'\e[32m'
reset=$'\e[0m'


_imagefile="";

function msg() {
  echo -e "${green}$@${reset}" >&2
}

function logerr() {
  echo -e "${red}Error: $@${reset}" >&2
}

function checkCommand() {
  if ! command -v $1 2>&1 >/dev/null; then
    logerr "Command '$1' not found, please check path or install if missing!"
    exit $FALSE
  fi

  return $TRUE
}

function getOffset() {
  file=$1
  size=$(fdisk -lu $file | grep ${file}3 | awk '{print $2}')
  size=$(( $size * 512))

  if [ $? ]; then
    echo $size
    return
  fi

  echo $FALSE
  return
}

function mountImage() {
  image=$1

  if [ ! $1 ]; then
      logerr "Please pass valid image file example:-\n          $0 radxa-zero3_debian_bullseye_cli_b6.img.xz\n"
      exit $FALSE
  fi

  extension="${image##*.}"

  if [ ! -f $image ]; then
    logerr "No image file '$image'"
    exit
  fi

  if [ "$extension" == "xz" ]; then
    checkCommand xz
    is_zipped=1
    msg "Decompressing $image"
    xz --decompress "$image"
    # Remove extension .xz
    image="${image%.*}"
    # Check it decompressed and file is there
    if [ ! -f $image ]; then
      logerr "Decompressing image file '$1' to '$image'"
      exit
    fi
  fi

  offset=$(getOffset $image)

  if [ ! -d "$MOUNT" ]; then
    mkdir "$MOUNT"
  fi

  mount -o loop,rw,sync,offset=$offset $image $MOUNT
  if [ ! $? ]; then
    logerr "Mounting image!"
    exit 1
  fi

  # second check for mount
  if [ ! -f "$MOUNT/$HOSTS" ]; then
    logerr "Doesn't look like image mounted correctly and/or incorrect image"
    cleanup
    exit 1
  fi
}


function download_install_aqualinkd {
  mkdir -p "$MOUNT/$TEMP_INSTALL"
  tar_url=$(curl -fsSL "$REPO/releases/latest" | grep -Po '"tarball_url": "\K.*?(?=")')
  if [[ "$tar_url" == "" ]]; then
    logerr "Find AqualinkD latest release failed"
    return "$FALSE"; 
  fi

  curl -fsSL "$tar_url" | tar xz --strip-components=1 --directory="$MOUNT/$TEMP_INSTALL"
  if [ $? -ne 0 ]; then 
    logerr "Download and extract $tar_url failed"
    return "$FALSE"; 
  fi

  if [ ! -f "$MOUNT/$TEMP_INSTALL/release/install.sh" ]; then
    logerr "Can not find install script $MOUNT/$TEMP_INSTALL/release/install.sh"
    return "$FALSE"
  fi

  # Get latest install script
  curl -fsSL -H "Accept: application/vnd.github.raw" "$REPO/contents/release/install.sh" -o $MOUNT/$TEMP_INSTALL/release/install.sh
  #cp /nas/data/Development/Raspberry/AqualinkD/release/install.sh $MOUNT/$TEMP_INSTALL/release/install.sh

  chmod u+x $MOUNT/$TEMP_INSTALL/release/install.sh
  chroot $MOUNT $TEMP_INSTALL/release/install.sh --arch arm64 nosystemd

  # Create sym link (ie systemctl enable aqualinkd)
  # Created symlink /etc/systemd/system/multi-user.target.wants/aqualinkd.service â†’ /etc/systemd/system/aqualinkd.service.
  if [ ! -f "$MOUNT/etc/systemd/system/multi-user.target.wants/aqualinkd.service" ]; then
    chroot $MOUNT ln -s /etc/systemd/system/aqualinkd.service /etc/systemd/system/multi-user.target.wants/aqualinkd.service
  fi

  # Set serial_port for aqualinkd HAT
  sed -i 's/ttyUSB0/ttyS2/g' $MOUNT/etc/aqualinkd.conf

  rm -rf $MOUNT/$TEMP_INSTALL 

  return "$TRUE";
}


function cleanup() {
  umount $MOUNT > /dev/null 2>&1
  rmdir $MOUNT > /dev/null 2>&1
}



function finalize() {
  
  msg "Finishing Image setup"

  # Install cron
  #msg "Installing cron"
  #apt-get update --assume-yes
  #apt-get install cron --assume-yes

  # upgrade distribution (Run rsetup) or apt-get dist-upgrade
  msg "Upgrading distribution"
  #apt-get dist-upgrade --allow-downgrades --assume-yes

  # run radxa-serial-patch (fix the f-up from above)
  msg "Fixing distribution"
  bash /usr/local/bin/radxa-serial-patch -repatch
  update-initramfs -u

  # The dist-upgrade will create multiple kernels in the u-boot menu, that will slow down u-boot, sometimes giving it time
  # to capture the serial input.  So set u-boot menu to last kernel.
  if grep -q "^U_BOOT_ENTRIES=\"1\"" "/etc/default/u-boot"; then
    msg "u-boot menu already set to 1 kernal"
  else
    msg "Setting u-boot menu to 1 kernal"
    echo -e "\nU_BOOT_ENTRIES=\"1\"\n" >> /etc/default/u-boot
    u-boot-update
  fi

  # Since this is probably run from curl, < /dev/tty overcomes the pipe using stdin.

  if [ -f "$EXT_ANTENNA_OVERLAY.disabled" ]; then
    read -rep "${green}Do you want to enable external antenna? (y/n)${reset} " -n 1 < /dev/tty
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      mv "$EXT_ANTENNA_OVERLAY.disabled" "$EXT_ANTENNA_OVERLAY"
      u-boot-update
    fi
  elif [ -f "$EXT_ANTENNA_OVERLAY" ]; then
    msg "External antenna already enabled"
  else
    msg "Can't find antenna already overlay"
  fi

  # On extlinux.conf should think about taking out label l1 and l1r as well, those seem to slow down the u-boot a touch
  # to the timeput 0 & prompt 0 don;t always work.

  msg "Cleanup journal and history"
  # clean journal
  journalctl --flush --rotate --vacuum-time=1s
  journalctl --user --flush --rotate --vacuum-time=1s

  # clean ~/.bash_history
  rm /home/radxa/.bash_history 2> /dev/null
  rm /root/.bash_history 2> /dev/null

  msg "Finished!"
  
  # Check cron.d as well.
    
  # Run rsetup / apt-get upgrade
    # apt-get update
    # apt-get dist-upgrade --allow-downgrades

  # run radxa-serial-patch (fix the f-up from above)

  # enable antenna
    # In /boot/extlinux/extlinux.conf
    # Change fdtoverlays  /boot/dtbo/rk3568-uart2-m0.dtbo
    # to     fdtoverlays  /boot/dtbo/radxa-zero3-external-antenna.dtbo /boot/dtbo/rk3568-uart2-m0.dtbo
    # On extlinux.conf should think about taking out label l1 and l1r as well, those seem to slow down the u-boot a touch
    # to the timeput 0 & prompt 0 don;t always work.

  # clean journal
    #journalctl --flush --rotate --vacuum-time=1s
    #journalctl --user --flush --rotate --vacuum-time=1s

  # clean ~/.bash_history
    # rm /home/radxa/.bash_history
    # rm /root/.bash_history
}


#############
## Main
##
##
##
#############


if command -v dpkg 2>&1 >/dev/null; then
  ARCH=$(dpkg --print-architecture)
  
  if [ "$ARCH" != "arm64" ]; then
     logerr "WARNING: Source OS $ARCH, this will only work on arm64"
     exit $FALSE
  fi
fi

if [ "$EUID" -ne 0 ]; then
  logerr "Please run as root"
  exit $FALSE
fi

mountOnly=$FALSE;

while [[ $# -gt 0 ]]; do
  case "$1" in
  --mount | --mountonly)
    mountOnly=$TRUE;
  ;;
  --unmount)
    cleanup
    msg "Unmounted $MOUNT"
    exit $TRUE
  ;;
  --finalize | --finish | finalize)
    finalize
    exit $TRUE
  ;;
  *)
    _imagefile=$1
  ;;
  esac
  shift
done



msg "Mounting $_imagefile"
mountImage $_imagefile

if [ $mountOnly -eq $TRUE ]; then
  exit $TRUE
fi

msg "Renaming host to aqualinkd"
sed -i 's/radxa-zero3/aqualinkd/g' $MOUNT/$HOSTS
sed -i 's/radxa-zero3/aqualinkd/g' $MOUNT/$HOSTNAME


# Install patchImage script
msg "Installing radxa-serial-patch"
curl -fsSL -H "Accept: application/vnd.github.raw" "$OWN_REPO/contents/radxa-serial-patch" -o $MOUNT/usr/local/bin/radxa-serial-patch
chmod 755 $MOUNT/usr/local/bin/radxa-serial-patch

# Install auto-wifi-setip script
msg "Installing auto-wifi-setup"
curl -fsSL -H "Accept: application/vnd.github.raw" "$OWN_REPO/contents/wifi-mount/auto-wifi-connect" -o $MOUNT/usr/local/bin/auto-wifi-connect
#cp /nas/data/Development/Raspberry/AqualinkD-Radxa-zero3/wifi-mount/auto-wifi-connect.sh $MOUNT/usr/local/bin/auto-wifi-connect
chmod 755 $MOUNT/usr/local/bin/auto-wifi-connect
chroot $MOUNT /usr/local/bin/auto-wifi-connect install


# Install AqualinkD
msg "Installing AqualinkD"
download_install_aqualinkd

#curl -fsSL https://install.aqualinkd.com | /usr/sbin/chroot $MOUNT bash -s -- latest


# Running rsetup -> upgrade should fix the below.
# Install signing keyring
msg "Updating package certificates"
keyring="$(mktemp)"
version="$(curl -fsSL https://github.com/radxa-pkg/radxa-archive-keyring/releases/latest/download/VERSION)"
curl -fsSL --output "$MOUNT/$keyring" "https://github.com/radxa-pkg/radxa-archive-keyring/releases/latest/download/radxa-archive-keyring_${version}_all.deb"
chroot $MOUNT dpkg -i "$keyring"
rm -f "$MOUNT/$keyring"

#sudo dpkg -i "$keyring"
#rm -f "$keyring"

cleanup

msg "Finished installing AqualinkD onto $_imagefile"
